#! /usr/bin/env bash

# ---
# Script that creates a directorie where you can save 2FA keys
# encrypted with GPG, and view them when neccessary.
# By ksobrenatural (ksobrenat32 on github)
# ---

set -e

# --- Variables

VAR0=$(basename "$0")
VAR1=$1
VAR2=$2

## Where configuration is saved
_dir="$HOME/.config/d2fa"
_config="${_dir}/config"

# --- Functions

function help () {
	if [ -z "$VAR1" ]; then
		echo "
This script helps you manage 2fa codes,
'example.com' is the name of the service

To print a 2fa code
	Format: '$VAR0 example.com'
To add 2fa key
	Format: '$VAR0 add example.com'
To get the 2fa secret key (WARNING, do not do it in a insecure enviroment)
	Format: '$VAR0 secret example.com'
To show the QR code to add the 2fa key to a authenticator app
	Format: '$VAR0 show_qr example.com'
To edit the configuration file of the script
	Format: '$VAR0 config'
"
    	exit 1
	fi
}

function chk_conf () {
	if ! [ -f "${_config}" ]; then
    	echo "You need to configure the script first."
    	echo "RUN '$VAR0 config'"
    	exit 1
	else
		source ${_config}
	fi
}

function create_conf () {
	mkdir -p ${_dir}
	if ! [ -f "${_config}" ]; then
		cat > ${_config} <<EOL
# d2fa script configuration

# Path where this are installed
_gpg="/usr/bin/gpg2"
_oathtool="/usr/bin/oathtool"
_qrencode="/usr/bin/qrencode"

# GPG ids, you can get them with "gpg --list-secret-keys --keyid-format LONG", 
# if you dont have a key, create one "gpg --full-generate-key".
_uid="" # Example: JohnDoe (GPG key for John Doe) <johndoe@example.com>
_kid="" # Example: N56N3EBEVY7E40CBK
EOL
		vim ${_config}

	else
		vim ${_config}
	fi

}

# --- Script

help

case $VAR1 in
	"add")
		chk_conf
		[ -f "${_dir}/${VAR2}/key.gpg" ] && { echo "Encrypted file exists."; exit 1; }
		mkdir -p ${_dir}/${VAR2}
		read -p "Write your 2fa key :" key
		echo -n "${key}" | tee ${_dir}/${VAR2}/key > /dev/null
		$_gpg -u "${_kid}" -r "${_uid}" --encrypt "${_dir}/${VAR2}/key" 
		rm -f "${_dir}/${VAR2}/key"
	;;
 	"secret")
		chk_conf
		[ ! -f "${_dir}/${VAR2}/key.gpg" ] && { echo "Encrypted file for ${VAR2} not found."; exit 1; }
		echo "Warning - Plain text key will be displayed."
                read -p "Are you sure? " -n 1 -r; echo
                if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                    exit 1
                fi
		_dkey=$($_gpg --quiet -u "${kid}" -r "${uid}" --decrypt "${_dir}/${VAR2}/key.gpg")
		echo "The secret for ${VAR2} is ${_dkey}"
	;;
	"show_qr")
		chk_conf
		[ ! -f "${_dir}/${VAR2}/key.gpg" ] && { echo "Encrypted file for ${VAR2} not found."; exit 1; }
		_dkey=$($_gpg --quiet -u "${kid}" -r "${uid}" --decrypt "${_dir}/${VAR2}/key.gpg")
		# Trim spaces
		_dkey=$(echo -n "${_dkey}" | tr -d '[:space:]')
		# otpauth://totp/<ACCOUNT>?secret=<SECRET>&issuer=<WEBSITE>
		$_qrencode -t ANSIUTF8 "otpauth://totp/${VAR2}?secret=${_dkey}"
	;;
 	"config")
		create_conf
	;;
	*)
		chk_conf
		[ ! -f "${_dir}/${VAR1}/key.gpg" ] && { echo "Encrypted file for ${VAR1} not found."; exit 1; }
		_dkey=$($_gpg --quiet -u "${kid}" -r "${uid}" --decrypt "${_dir}/${VAR1}/key.gpg")
		_code=$($_oathtool -b --totp "${_dkey}")
		echo "The code for ${VAR1} is ${_code}"
		echo "${_code}" | wl-copy
		echo "Copied to clipboard :)"
		[ -f "${_dir}/${VAR1}/key" ] && echo "Warning - Plain text key file ${_dir}/${VAR1}/key found."
esac

